from django.contrib.sites.models import Site
from django.db import models
from edc_constants.constants import CLOSED, OPEN
from edc_model.models import BaseUuidModel, HistoricalRecords
from edc_sites.model_mixins import SiteModelMixin
from edc_utils import get_utcnow
from sequences import get_next_value

from ...exceptions import InvalidContainer
from ..medication import Formulation
from ..proxy_models import SiteProxy
from ..stock import Container


class Manager(models.Manager):
    use_in_migrations = True


class StockRequest(SiteModelMixin, BaseUuidModel):
    """A model to represent a stock request for subject stock.

    A request originates from, or is linked to, the research site.
    """

    request_identifier = models.CharField(
        max_length=36,
        unique=True,
        null=True,
        blank=True,
        help_text="Auto-generated by the EDC.",
    )

    request_datetime = models.DateTimeField(default=get_utcnow)

    site_proxy = models.ForeignKey(
        SiteProxy,
        verbose_name="Requested from",
        on_delete=models.PROTECT,
        related_name="+",
        null=True,
        blank=False,
    )

    formulation = models.ForeignKey(Formulation, on_delete=models.PROTECT)

    container = models.ForeignKey(Container, on_delete=models.PROTECT, null=True, blank=False)

    containers_per_subject = models.PositiveSmallIntegerField(
        verbose_name="Number of containers per subject", default=1
    )

    # location = models.ForeignKey(Location, verbose_name="Requested from", on_delete=PROTECT)

    item_count = models.IntegerField(
        verbose_name="Item count",
        default=0,
        help_text="Matches the number of Request items.",
    )

    labels = models.TextField(
        verbose_name="Labels",
        null=True,
        blank=True,
        help_text=(
            "A cell to capture and confirm printed/scanned labels related to this "
            "Stock request. See StockRequestItem."
        ),
    )

    status = models.CharField(
        max_length=25,
        choices=((OPEN, OPEN.title()), (CLOSED, CLOSED.title())),
        default=OPEN,
    )

    objects = Manager()

    history = HistoricalRecords()

    def __str__(self):
        return self.request_identifier

    def save(self, *args, **kwargs):
        self.site = Site.objects.get(id=self.site_proxy.id)
        if not self.request_identifier:
            next_id = get_next_value(self._meta.label_lower)
            self.request_identifier = f"{next_id:06d}"
        if not self.container.may_request_as:
            raise InvalidContainer(
                "Invalid stock.container. Must be a `subject-specific` container. "
                "Perhaps catch this in the form."
            )
        super().save(*args, **kwargs)

    class Meta(SiteModelMixin.Meta, BaseUuidModel.Meta):
        verbose_name = "Stock request"
        verbose_name_plural = "Stock requests"
